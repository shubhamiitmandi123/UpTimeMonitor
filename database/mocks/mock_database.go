// Code generated by MockGen. DO NOT EDIT.
// Source: up_time_monitor/database (interfaces: Database)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	structures "up_time_monitor/structures"

	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	uuid "github.com/satori/go.uuid"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ConnectToDatabase mocks base method
func (m *MockDatabase) ConnectToDatabase() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToDatabase")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// ConnectToDatabase indicates an expected call of ConnectToDatabase
func (mr *MockDatabaseMockRecorder) ConnectToDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToDatabase", reflect.TypeOf((*MockDatabase)(nil).ConnectToDatabase))
}

// CreateDataBase mocks base method
func (m *MockDatabase) CreateDataBase(arg0 structures.Request) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataBase", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataBase indicates an expected call of CreateDataBase
func (mr *MockDatabaseMockRecorder) CreateDataBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataBase", reflect.TypeOf((*MockDatabase)(nil).CreateDataBase), arg0)
}

// DeleteFromDatabase mocks base method
func (m *MockDatabase) DeleteFromDatabase(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromDatabase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromDatabase indicates an expected call of DeleteFromDatabase
func (mr *MockDatabaseMockRecorder) DeleteFromDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromDatabase", reflect.TypeOf((*MockDatabase)(nil).DeleteFromDatabase), arg0)
}

// GetAllRecords mocks base method
func (m *MockDatabase) GetAllRecords() []structures.URLInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].([]structures.URLInfo)
	return ret0
}

// GetAllRecords indicates an expected call of GetAllRecords
func (mr *MockDatabaseMockRecorder) GetAllRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockDatabase)(nil).GetAllRecords))
}

// GetURLByID mocks base method
func (m *MockDatabase) GetURLByID(arg0 uuid.UUID) (structures.URLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByID", arg0)
	ret0, _ := ret[0].(structures.URLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByID indicates an expected call of GetURLByID
func (mr *MockDatabaseMockRecorder) GetURLByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByID", reflect.TypeOf((*MockDatabase)(nil).GetURLByID), arg0)
}

// Migrate mocks base method
func (m *MockDatabase) Migrate(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockDatabaseMockRecorder) Migrate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatabase)(nil).Migrate), arg0)
}

// UpdateColumnInDatabase mocks base method
func (m *MockDatabase) UpdateColumnInDatabase(arg0 uuid.UUID, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumnInDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateColumnInDatabase indicates an expected call of UpdateColumnInDatabase
func (mr *MockDatabaseMockRecorder) UpdateColumnInDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnInDatabase", reflect.TypeOf((*MockDatabase)(nil).UpdateColumnInDatabase), arg0, arg1, arg2)
}

// UpdateDatabase mocks base method
func (m *MockDatabase) UpdateDatabase(arg0 structures.URLInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatabase indicates an expected call of UpdateDatabase
func (mr *MockDatabaseMockRecorder) UpdateDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabase", reflect.TypeOf((*MockDatabase)(nil).UpdateDatabase), arg0)
}
